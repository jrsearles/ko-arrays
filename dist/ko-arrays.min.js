/* ko-arrays 2014-04-26 */
!function(a,b){["concat","every","forEach","join","lastIndexOf","reduce","reduceRight","some"].forEach(function(b){a.observableArray.fn[b]=a.observableArray.fn[b]||function(){var a=this.peek();return a[b].apply(a,arguments)}}),a.observableArray.fn.observableSlice=function(c,d){var e=this,f=a.observableArray(e.peek().slice(c,d));return e.subscribe(function(a){var g=d,h=e.peek(),i=c===b;g===b?g=h.length:0>g&&(g+=h.length+1),i||(i=a.some(function(a){return a.index>=c&&a.index<g})),i&&f(h.slice(c,d))},null,"arrayChange"),a.computed({read:f})},a.extenders.arrayChanges=function(b){var c=b.peek();if(!Array.isArray(c))throw new TypeError("The `arrayChanges` extender can only be used against arrays.");var d=c.slice(0),e=a.observableArray(),f=function(a){return function(){return e().filter(function(b){return b.status===a}).map(function(a){return a.value})}};return b.subscribe(function(){var c=a.utils.compareArrays(d,b.peek());e(c.filter(function(a){return"retained"!==a.status}))}),b.$$adds=a.computed(f("added")),b.$$deletes=a.computed(f("deleted")),b}}(ko);